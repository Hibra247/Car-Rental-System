//------------------------------------------
//To Do:
//include namespace
//int main:
//ask user to enter name and password
//display car
//select the car by index number
//how many day car 
//credit card detail
//pick up time
//customer:
//store card detail
//car rental history
//------------------------------------------
#include<iostream>
#include <fstream>
#include <cstdlib>
#include <iomanip>
using namespace std;

// Class representing a Car
class Car{

private:
    int carID;
    string brand;
    string model;
    int year;
    bool availability;
    double rental_price;
    static int Car_count;

public:
    Car(){} // Default constructor needed for array declaration
    Car(int _carID, string _brand, string _model, int _year, double _rental_price): carID(_carID),brand(_brand),model(_model),year(_year),rental_price(_rental_price){Car_count++;};

    // Method to set details of a car
    void setDetail(int _carID, string _brand, string _model, int _year, double _rental_price){
        carID = _carID;
        brand = _brand;
        model = _model;
        year = _year;
        rental_price = _rental_price;
        availability = true; // Assume car is available by default
    }

    // Getter methods for car attributes
    int getId(){return carID;};
    string getBrand(){return brand;};
    string getModel(){return model;};
    int getYear(){return year;};
    double getRentalPrice(){return rental_price;};

    // Method to display car details
    void display(){
        cout << "Car ID: " << carID << endl;
        cout << "Brand: " << brand << endl;
        cout << "Model: " << model << endl;
        cout << "Year: " << year << endl;
        cout << "Rental Price: $" << rental_price << endl;
        cout << "Availability: " << (availability ? "Available" : "Unavailable") << endl;
        cout << endl;
    }

    // Method to calculate rental price based on number of days
    double calcPrice(int day){
        double price = rental_price * day;
        return price;
    }
};

int Car::Car_count=0;

// Class representing a User
class User{
protected:
    string name;
    string password;

public:
    User(string n, string p) : name(n), password(p) {}
    string getusername(){
        return name;
    }
    string getpassword(){
        return password;
    }

    // Method to store user information in a file
    void storeinfo(){
        ofstream outFile("customer_info.txt", ios::app); // Open file in append mode
        if (outFile.is_open()) {
            outFile << "Username: " << name << ", Password: " << password << endl;
            outFile.close();
            cout << "User information stored in customer_info.txt" << endl;
        } else {
            cout << "Unable to open file!" << endl;
        }
    }
};

// Class representing a Customer, inheriting from User
class Customer : protected User{
    
};

// Class representing a Booking Manager, inheriting from User and Car
class BookingManager: protected User, public Car{
 private:
    string customername;
    int carnumber;
    int days;
    double rentalfee;

public:
    BookingManager(string name, string password, string cname, int cnumber, int days, double fee)
        : User(name, password), carnumber(cnumber), days(days), rentalfee(fee) {}

    // Method to select a car
    void selectCar() {
        // Display menu of cars and prompt user to enter car number
        // Set carnumber data member based on user's selection
    }

    // Method to set number of days for rental
    void setDays() {
        // Prompt user to enter number of days to rent car
        // Set days data member based on user's input
    }

    // Method to display rental invoice
    void showrent()
    {
        // Display rental invoice details
        cout << "\n                       Car Rental - Customer Invoice                  "<<endl;
            cout << "    ///////////////////////////////////////////////////////////"<<endl;
            cout << "    | Invoice No. :"<<"------------------|"<<setw(10)<<"#BnC92243"<<" |"<<endl;
            cout << "    | Customer Name:"<<"-----------------|"<<setw(10)<<customername<<" |"<<endl;
        cout << "    | Car Model :"<<"--------------------|"<<setw(10)<<getModel()<<" |"<<endl;
            cout << "    | Car No. :"<<"----------------------|"<<setw(10)<<carnumber<<" |"<<endl;
            cout << "    | Number of days :"<<"---------------|"<<setw(10)<<days<<" |"<<endl;
            cout << "    | Your Rental Amount is :"<<"--------|"<<setw(10)<<rentalfee<<" |"<<endl;
            cout << "    | Caution Money :"<<"----------------|"<<setw(10)<<"0"<<" |"<<endl;
            cout << "    | Advanced :"<<"---------------------|"<<setw(10)<<"0"<<" |"<<endl;
            cout << "     ________________________________________________________"<<endl;
            cout <<"\n";
            cout << "    | Total Rental Amount is :"<<"-------|"<<setw(10)<<rentalfee<<" |"<<endl;
            cout << "     ________________________________________________________"<<endl;
            int f;
    }
};
int num_cars=25;
int main(){
    
    // Array of Car objects initialized with car details
    Car cars[num_cars]={
        // Car details initialization
        {1, "Toyota", "Camry LE", 2020, 40.0},
                {2, "Ford", "Mustang GT", 2019, 60.0},
                {3, "Honda", "Civic LX", 2021, 45.0},
                {4, "Chevrolet", "Silverado 1500 LT", 2018, 55.0},
                {5, "BMW", "3 Series 330i", 2022, 70.0},
                {6, "Mercedes-Benz", "E-Class E350", 2017, 65.0},
                {7, "Audi", "A4 Premium", 2020, 60.0},
                {8, "Tesla"," Model S Performance", 2023, 150.0},
                {9, "Subaru", "Outback Limited", 2019, 55.0},
                {10, "Nissan", "Altima SV", 2021, 50.0},
                {11, "Ford", "F-150 XLT", 2018, 65.0},
                {12, "Toyota"," Corolla SE", 2020, 40.0},
                {13, "Volkswagen", "Jetta GLI", 2022, 45.0},
                {14, "Hyundai"," Sonata SEL", 2019, 50.0},
                {15, "Jeep", "Wrangler Rubicon", 2021, 80.0},
                {16, "Chevrolet"," Tahoe Premier", 2017, 100.0},
                {17, "Lexus", "RX 350 F Sport", 2020, 90.0},
                {18, "Mazda"," CX-5 Grand Touring", 2019, 55.0},
                {19, "Kia"," Telluride SX", 2022, 80.0},
                {20, "Dodge"," Charger R/T", 2018, 70.0},
                {21, "Subaru"," Forester Touring", 2021, 60.0},
                {22, "Honda"," Accord Sport", 2020, 50.0},
                {23, "Ford"," Explorer Limited", 2019, 70.0},
                {24, "GMC","Sierra 2500HD Denali", 2022, 120.0},
                {25, "BMW", "X5 xDrive40i", 2018, 100.0},
              
             };

 User u1("hareem","1234");// customer
Car c1;
int choice; 
double price;
int day;

    // Welcome message
    cout<<"************************** WELCOME TO ONLINE CAR RENTAL SYSTEM***************************"<<endl;
    c1.display();

  cout << "Available Cars:" << endl;
    for (int i = 0; i < num_cars; i++) {
        cout << "Car " << cars[i].getId() << ": " << cars[i].getBrand() << " " << cars[i].getModel() << endl;
    }

    // Prompt user to select a car
    cout << "Enter the car ID you want to rent: ";
    cin >> choice;

    // Find the selected car and get its rental price
    for (int i = 0; i < num_cars; i++) {
        if (cars[i].getId() == choice) {
            price = cars[i].getRentalPrice();
            break;
        }
    }
cout<<"enter the number of days for rent: "<<endl; // correct line 
cin>>day;
    price=price*day;

    // Now 'price' contains the rental price of the selected car
    cout << "Rental Price of selected car: $" << price << endl;
 BookingManager m1("username", "password", "customername", choice, day, price);
 m1.showrent();

    // Code execution starts here
}




