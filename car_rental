
#include<iostream>
#include <fstream>
#include <cstdlib>
#include <iomanip>
using namespace std;

// Class representing a Car
class Car{

private:
    int carID;
    string brand;
    string model;
    int year;
    bool availability;
    double rental_price;
    static int Car_count;

public:
    Car(){} // Default constructor needed for array declaration
    Car(int _carID, string _brand, string _model, int _year, double _rental_price): carID(_carID),brand(_brand),model(_model),year(_year),rental_price(_rental_price){Car_count++;};

    // Method to set details of a car
    void setDetail(int _carID, string _brand, string _model, int _year, double _rental_price){
        carID = _carID;
        brand = _brand;
        model = _model;
        year = _year;
        rental_price = _rental_price;
        availability = true; // Assume car is available by default
    }

    void setAvailability(bool value){
     availability = value;
    }
    // Getter methods for car attributes
    int getId(){return carID;};
    string getBrand(){return brand;};
    string getModel(){return model;};
    int getYear(){return year;};
    double getRentalPrice(){return rental_price;};

    // Method to display car details
    void display(){
        cout << "Car ID: " << carID << endl;
        cout << "Brand: " << brand << endl;
        cout << "Model: " << model << endl;
        cout << "Year: " << year << endl;
        cout << "Rental Price: $" << rental_price << endl;
        cout << "Availability: " << (availability ? "Available" : "Unavailable") << endl;
        cout << endl;
    }

    
};

int Car::Car_count=0;

// Class representing a User
class User{
protected:
    string username;
    string password;

public:
    User(string n, string p) : username(n), password(p) {}
    string getusername(){
        return username;
    }
    string getpassword(){
        return password;
    }

    // Method to register a new user 

        void registerUser() {
        cout << "Enter username: ";
        cin >> username;
        cout << "Enter password: ";
        cin >> password;

        ofstream outFile("customer_data.txt", ios::app);
        if (outFile.is_open()) {
            outFile << username << " " << password << endl;
            cout << "Registration successful." << endl;
            outFile.close();
        } else {
            cerr << "Unable to open file!" << endl;
        }
    }

    // Method to log in an existing user
    bool loginUser() {
        string inputUsername, inputPassword;
        cout << "Enter username: ";
        cin >> inputUsername;
        cout << "Enter password: ";
        cin >> inputPassword;

        ifstream inFile("customer_data.txt");
        if (inFile.is_open()) {
            string fileUsername, filePassword;
            while (inFile >> fileUsername >> filePassword) {
                if (fileUsername == inputUsername && filePassword == inputPassword) {
                    cout << "Login successful." << endl;
                    inFile.close();
                    return true;
                }
            }
            inFile.close();
        } else {
            cerr << "Unable to open file!" << endl;
        }

        cout << "Invalid username or password." << endl;
        return false;
    }
};

class Customer : public User{
public:
    // Constructor
    Customer(string n, string p) : User(n, p) {}
    
    void payment() {
        try {
            int cardnumber, cvc;
            string expirydate, name;
            cout << "Credit Card                                               VISA" << endl;
            cout << "Card number :";
            cin >> cardnumber;
            if (cin.fail()) {
                throw runtime_error("Invalid input! Please enter a valid card number.");
            }
            cout << "Expiry Date: ";
            cin >> expirydate;
            if (cin.fail()) {
                throw runtime_error("Invalid input! Please enter a valid expiry date.");
            }
            cout << "CVC:";
            cin >> cvc;
            if (cin.fail()) {
                throw runtime_error("Invalid input! Please enter a valid CVC.");
            }
            cout << "Payment successful" << endl;
            cout<< "Thank you for shopping at Morent! Kindly collect your car from the shop"<<endl;
        }
        }
        catch (const std::exception& e) {
            cerr << "Exception occurred: " << e.what() << endl;
            cin.clear(); // Clear error flags
           
        }
        catch (...) {
            cerr << "Unknown exception occurred." << endl;
            cin.clear(); // Clear error flags
           
        }
    }
    };

// Class representing a Booking Manager, inheriting from User and Car
class BookingManager : protected User, public Car {
private:
    string customername;
    Car customer_car;
    int day;
    double rentalfee;

public: 
    BookingManager(string name, string password, string cname, Car c1, int _days, double fee)
        : User(name, password), customer_car(c1), day(_days), rentalfee(fee) {} // cnmame stands for customer name

    // Method to calculate rental price based on number of days
    double calcPrice() {
        rentalfee = customer_car.getRentalPrice() * day;
        return rentalfee;
    }

    // Method to display rental invoice
    void showrent() {

                // Calculate rental fee if it hasn't been calculated yet
                if (rentalfee == 0.0) {
                    rentalfee = calcPrice();
                }

                // Display rental invoice details
                cout << "\n                        Customer Invoice                  " << endl;
                cout << "    ///////////////////////////////////////////////////////////" << endl;
                cout << "    | Customer Name:" << "-----------------|" << setw(10) << customername << " |" << endl;
                cout << "    | Car Model :" << "--------------------|" << setw(10) << customer_car.getModel() << " |" << endl;
                cout << "    | Car Brand :" << "--------------------|" << setw(10) << customer_car.geBrand() << " |" << endl;
                cout << "    | Car No. :" << "----------------------|" << setw(10) << customer_car.getId() << " |" << endl;
                cout << "    | Car Rental Price is :" << "--------|" << setw(10) << customer_car.getRentalPrice() << " |" << endl;
                cout << "    | Number of days :" << "---------------|" << setw(10) << day << " |" << endl;
                cout << "     ________________________________________________________" << endl;
                cout << "\n";
                cout << "    | Total Rental Amount is :" << "-------|" << setw(10) << rentalfee << " |" << endl;
                cout << "     ________________________________________________________" << endl;
                cout << "    ///////////////////////////////////////////////////////////" << endl;

            }
           
    };
int num_cars=25;
int main(){
    
    // Array of Car objects initialized with car details
    Car cars[25]={

                {1, "Toyota", "Camry LE", 2020, 40.0},
                {2, "Ford", "Mustang GT", 2019, 60.0},
                {3, "Honda", "Civic LX", 2021, 45.0},
                {4, "Chevrolet", "Silverado 1500 LT", 2018, 55.0},
                {5, "BMW", "3 Series 330i", 2022, 70.0},
                {6, "Mercedes-Benz", "E-Class E350", 2017, 65.0},
                {7, "Audi", "A4 Premium", 2020, 60.0},
                {8, "Tesla"," Model S Performance", 2023, 150.0},
                {9, "Subaru", "Outback Limited", 2019, 55.0},
                {10, "Nissan", "Altima SV", 2021, 50.0},
                {11, "Ford", "F-150 XLT", 2018, 65.0},
                {12, "Toyota"," Corolla SE", 2020, 40.0},
                {13, "Volkswagen", "Jetta GLI", 2022, 45.0},
                {14, "Hyundai"," Sonata SEL", 2019, 50.0},
                {15, "Jeep", "Wrangler Rubicon", 2021, 80.0},
                {16, "Chevrolet"," Tahoe Premier", 2017, 100.0},
                {17, "Lexus", "RX 350 F Sport", 2020, 90.0},
                {18, "Mazda"," CX-5 Grand Touring", 2019, 55.0},
                {19, "Kia"," Telluride SX", 2022, 80.0},
                {20, "Dodge"," Charger R/T", 2018, 70.0},
                {21, "Subaru"," Forester Touring", 2021, 60.0},
                {22, "Honda"," Accord Sport", 2020, 50.0},
                {23, "Ford"," Explorer Limited", 2019, 70.0},
                {24, "GMC","Sierra 2500HD Denali", 2022, 120.0},
                {25, "BMW", "X5 xDrive40i", 2018, 100.0},
              
             };

        // Set availability of all cars to true every time the program runs 
        for (int i = 0; i < num_cars; i++) {
          cars[i].setAvailability(true);
        }


    cout<<"+++++++++++++++++++++++++++MORENT+++++++++++++++++++++++++++"<<endl;
    cout<<"                 ONLINE CAR RENTAL WEBSITE                  "<<endl; 

    cout << "Available Cars:" << endl;       // display all cars to user 
    for (int i = 0; i < num_cars; i++) {
        cars[i].display();
    }

    // Prompt user to select a car
    cout << "Enter the car ID you want to rent: ";
    int choice;
    cin >> choice;

    Car selectedCar;      //refers to the car the customer has selected.
   // Find the selected car and get its details.


    for (int i = 0; i < num_cars; i++) {
        if (cars[i].getId() == choice) {
            selectedCar = cars[i];
            break;
        }
    }

    // Prompt user for number of days for rent
    cout << "Enter the number of days for rent: ";
    int day;
    cin >> day;

   BookingManager m1("username", "password", "customername", selectedCar, day, 0.0); //customer info and car preference is sent to manager 
    double totalRentalPrice = m1.calcPrice();
    

    cout<<"Register or login before proceeding to payment"<<endl;
    cout<<"1. Register" <<endl;
    cout<<"2. Login" <<endl;
    cout<<"Enter choice(number): ";
    int choice1;
    cin>>choice1;
   
    
    Customer c("", ""); // Initialize a customer object
   
    if(choice1==1){ 
        c.registerUser();
    }else if (choice1==2){
        if(!c.loginUser()){  // if the user is not logged in, then registration function will be called. 
            cout<<"Register please" <<endl;
            c.registerUser();
            return 0;
        }
    }else{
        cout<<"Invalid choice. Exiting...." <<endl;
        return 0;
    }
    
    //Successful login then proceed with car payment 
    m1.showrent(); // displays car receipt 
    c.payment();  // displays payment option 

    return 0;
}




